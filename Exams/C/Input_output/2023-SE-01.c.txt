#include <fcntl.h>
#include <stdint.h>
#include <err.h>
#include <unistd.h>
#include <stdlib.h>

static void close_all(int stream,int messages) {
        close(stream);
        close(messages);
}

int main(int argc,char* argv[]) {
        if(argc != 3) {
                errx(1,"arg error");
        }

        int stream = open(argv[1],O_RDONLY);
        if(stream < 0) {
                err(1,"stream open error");
        }

        int messages = open(argv[2],O_WRONLY | O_CREAT | O_TRUNC,0644);
        if(messages < 0) {
                close(stream);
                err(1,"messages open error");
        }

        uint8_t byte;
        ssize_t read_size;
        while((read_size=read(stream,&byte,sizeof(byte))) > 0) {
                if(byte == 0x55) {
                        uint8_t n;
                        if((read_size=read(stream,&n,sizeof(n))) != sizeof(n)) {
                                close_all(stream,messages);
                                if(read_size < 0) {
                                        err(1,"read error");
                                } else {
                                        errx(1,"invalid argument");
                                }
                        }

                        uint8_t checksum =      n ^ 0x55;
                        uint8_t* arr = (uint8_t*)malloc(n - 1 * sizeof(uint8_t));
                        if(!arr) {
                                err(1,"malloc error");
                        }

                        for(int i = 0;i < n - 1;i++) {
                                if((read_size=read(stream,&arr[i],sizeof(arr[i]))) != sizeof(arr[i])) {
                                        close_all(stream,messages);
                                        free(arr);
                                        if(read_size < 0) {
                                                err(1,"read error");
                                        } else {
                                                errx(1,"invalid argument");
                                        }
                                }
                                checksum ^= arr[i];
                        }

                        uint8_t recieved_checksum;
                        if((read_size=read(stream,&recieved_checksum,sizeof(recieved_checksum))) != sizeof(recieved_checksum)) {
                                close_all(stream,messages);
                                free(arr);
                                if(read_size < 0) {
                                        err(1,"read error");
                                } else {
                                        errx(1,"invalid argument");
                                }
                        }

                        if(checksum == recieved_checksum) {
                                if(write(messages,&byte,sizeof(uint8_t) != sizeof(uint8_t))) {
                                        close_all(stream,messages);
                                        free(arr);
                                        err(1,"write error");
                                }

                                if(write(messages,&n,sizeof(uint8_t) != sizeof(uint8_t))) {
                                        close_all(stream,messages);
                                        free(arr);
                                        err(1,"write error");
                                }

                                if(write(messages,arr,n - 1) != (n - 1)) {
                                        close_all(stream,messages);
                                        free(arr);
                                        err(1,"write error");
                                }

                                if(write(messages,&recieved_checksum,sizeof(recieved_checksum)) != sizeof(recieved_checksum)) {
                                        close_all(stream,messages);
                                        free(arr);
                                        err(1,"write error");
                                }
                        }
                        free(arr);
                }
        }

        close(stream);
        close(messages);
        return 0;
}
